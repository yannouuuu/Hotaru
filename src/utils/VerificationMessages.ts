import { EmbedBuilder, Colors, ActionRowBuilder, ButtonBuilder, ButtonStyle } from 'discord.js';
import type { VerificationStats, VerifiedUser } from '../types/verify.js';

/**
 * Messages et embeds pour le syst√®me de v√©rification
 */
export class VerificationMessages {
    /**
     * Message de succ√®s apr√®s envoi du code
     */
    static createCodeSentMessage(email: string): { embeds: EmbedBuilder[], components: ActionRowBuilder<ButtonBuilder>[] } {
        const embed = new EmbedBuilder()
            .setTitle('‚úÖ Code de v√©rification envoy√© !')
            .setDescription(
                `Un code de v√©rification a √©t√© envoy√© √† :\n` +
                `üìß **${email}**\n\n` +
                `**Prochaines √©tapes :**\n` +
                `1Ô∏è‚É£ Consultez votre bo√Æte mail\n` +
                `2Ô∏è‚É£ Copiez le code de v√©rification\n` +
                `3Ô∏è‚É£ Cliquez sur le bouton ci-dessous\n` +
                `4Ô∏è‚É£ Entrez le code re√ßu\n\n` +
                `‚è±Ô∏è **Le code expire dans 15 minutes**\n` +
                `üí° Si vous ne recevez pas l'email, v√©rifiez vos spams`
            )
            .setColor(Colors.Green)
            .setFooter({ text: 'Hotaru - V√©rification' })
            .setTimestamp();

        const button = new ButtonBuilder()
            .setCustomId('verify_code_input')
            .setLabel('üìù Entrer le code de v√©rification')
            .setStyle(ButtonStyle.Success);

        const row = new ActionRowBuilder<ButtonBuilder>().addComponents(button);

        return { embeds: [embed], components: [row] };
    }

    /**
     * Message de succ√®s apr√®s validation
     */
    static createVerificationSuccessMessage(): { embeds: EmbedBuilder[] } {
        const embed = new EmbedBuilder()
            .setTitle('üéâ V√©rification r√©ussie !')
            .setDescription(
                `**Excellent !** Votre compte √©tudiant a √©t√© v√©rifi√© avec succ√®s.\n\n` +
                `‚úÖ Vous avez re√ßu le r√¥le **"‚úÖ V√©rifi√©"**\n` +
                `üë®‚Äçüéì Vous avez re√ßu le r√¥le **"√âtudiant"**\n` +
                `üîì Vous avez maintenant acc√®s √† tous les salons du serveur\n\n` +
                `**Acc√®s disponibles :**\n` +
                `üí¨ Discussions g√©n√©rales et gossip\n` +
                `üîä Salons vocaux pour les cours/projets\n` +
                `üìö Entraide et partage de cours\n` +
                `üéÆ D√©tente entre les cours\n\n` +
                `Bienvenue dans votre groupe de semestre ! üéì`
            )
            .setColor(Colors.Gold)
            .setFooter({ text: 'Hotaru - BUT Informatique' })
            .setTimestamp();

        return { embeds: [embed] };
    }

    /**
     * Message d'erreur g√©n√©rique
     */
    static createErrorMessage(
        title: string,
        description: string,
        suggestion?: string
    ): { embeds: EmbedBuilder[] } {
        let fullDescription = `‚ùå ${description}`;
        
        if (suggestion) {
            fullDescription += `\n\nüí° **Suggestion :**\n${suggestion}`;
        }

        const embed = new EmbedBuilder()
            .setTitle(title)
            .setDescription(fullDescription)
            .setColor(Colors.Red)
            .setFooter({ text: 'Hotaru - Erreur' })
            .setTimestamp();

        return { embeds: [embed] };
    }

    /**
     * Message d'aide pour la v√©rification
     */
    static createHelpMessage(): { embeds: EmbedBuilder[] } {
        const embed = new EmbedBuilder()
            .setTitle('üìñ Aide - Syst√®me de v√©rification')
            .setDescription(
                `**Comment se v√©rifier ?**\n\n` +
                `**√âtape 1 :** Cliquez sur "üéì Commencer la v√©rification"\n` +
                `Un modal s'ouvrira pour entrer votre email universitaire\n\n` +
                `**√âtape 2 :** Entrez votre email\n` +
                `Format accept√© : \`prenom.nom.etu@univ-lille.fr\`\n` +
                `Autres domaines autoris√©s : \`@univ-lille.fr\`, \`@etu.univ-lille.fr\`\n\n` +
                `**√âtape 3 :** Consultez vos emails\n` +
                `Vous recevrez un code de v√©rification √† 6 caract√®res\n\n` +
                `**√âtape 4 :** Validez le code\n` +
                `Cliquez sur "üìù Entrer le code de v√©rification" puis entrez le code re√ßu\n\n` +
                `**S√©curit√© :**\n` +
                `üîí Code valide 15 minutes\n` +
                `‚è±Ô∏è Cooldown de 5 minutes entre les tentatives\n` +
                `üö´ Maximum 3 tentatives par jour\n\n` +
                `**Probl√®mes ?**\n` +
                `Cr√©ez un ticket ou contactez un mod√©rateur`
            )
            .setColor(Colors.Blue)
            .setFooter({ text: 'Hotaru - Aide' })
            .setTimestamp();

        return { embeds: [embed] };
    }

    /**
     * Message de statistiques pour les admins
     */
    static createStatsMessage(stats: VerificationStats): { embeds: EmbedBuilder[] } {
        const embed = new EmbedBuilder()
            .setTitle('üìä Statistiques de v√©rification')
            .setDescription(
                `**Vue d'ensemble :**\n\n` +
                `üë• **Total v√©rifi√© :** ${stats.totalVerified} utilisateurs\n` +
                `üìÖ **Aujourd'hui :** ${stats.verifiedToday} v√©rifications\n` +
                `üìÜ **Cette semaine :** ${stats.verifiedThisWeek} v√©rifications\n` +
                `üìù **Tentatives totales :** ${stats.totalAttempts}\n` +
                `‚úÖ **Taux de r√©ussite :** ${stats.successRate}%\n\n` +
                `**Performance :**\n` +
                `${stats.successRate >= 80 ? 'üü¢ Excellent' : stats.successRate >= 60 ? 'üü° Correct' : 'üî¥ √Ä am√©liorer'}`
            )
            .setColor(Colors.Blue)
            .setFooter({ text: 'Hotaru - Statistiques' })
            .setTimestamp();

        return { embeds: [embed] };
    }

    /**
     * Message de liste des utilisateurs v√©rifi√©s
     */
    static createVerifiedListMessage(
        users: VerifiedUser[],
        page: number = 1,
        perPage: number = 10
    ): { embeds: EmbedBuilder[] } {
        const start = (page - 1) * perPage;
        const end = start + perPage;
        const pageUsers = users.slice(start, end);
        const totalPages = Math.ceil(users.length / perPage);

        let description = `**Liste des utilisateurs v√©rifi√©s** (${users.length} total)\n\n`;

        pageUsers.forEach((user, index) => {
            const verifiedDate = new Date(user.verifiedAt).toLocaleDateString('fr-FR');
            const verifiedBy = user.verifiedBy === 'email' ? 'üìß Email' : 'üëë Manuel';
            description += `**${start + index + 1}.** <@${user.userId}>\n`;
            description += `   üìß ${user.email}\n`;
            description += `   ${verifiedBy} - ${verifiedDate}\n\n`;
        });

        if (totalPages > 1) {
            description += `\nüìÑ Page ${page}/${totalPages}`;
        }

        const embed = new EmbedBuilder()
            .setTitle('‚úÖ Utilisateurs v√©rifi√©s')
            .setDescription(description)
            .setColor(Colors.Green)
            .setFooter({ text: `Hotaru - Page ${page}/${totalPages}` })
            .setTimestamp();

        return { embeds: [embed] };
    }

    /**
     * Message de confirmation de suppression
     */
    static createRemovalConfirmation(userId: string, email: string): { embeds: EmbedBuilder[] } {
        const embed = new EmbedBuilder()
            .setTitle('‚úÖ V√©rification supprim√©e')
            .setDescription(
                `La v√©rification a √©t√© supprim√©e avec succ√®s.\n\n` +
                `**Utilisateur :** <@${userId}>\n` +
                `**Email :** ${email}\n\n` +
                `L'utilisateur devra se v√©rifier √† nouveau pour acc√©der au serveur.`
            )
            .setColor(Colors.Orange)
            .setFooter({ text: 'Hotaru - Administration' })
            .setTimestamp();

        return { embeds: [embed] };
    }

    /**
     * Message de v√©rification manuelle r√©ussie
     */
    static createManualVerifySuccess(userId: string, email: string): { embeds: EmbedBuilder[] } {
        const embed = new EmbedBuilder()
            .setTitle('‚úÖ V√©rification manuelle effectu√©e')
            .setDescription(
                `L'utilisateur a √©t√© v√©rifi√© manuellement avec succ√®s.\n\n` +
                `**Utilisateur :** <@${userId}>\n` +
                `**Email :** ${email}\n` +
                `**M√©thode :** V√©rification manuelle par un administrateur\n\n` +
                `Le r√¥le "‚úÖ V√©rifi√©" a √©t√© attribu√©.`
            )
            .setColor(Colors.Green)
            .setFooter({ text: 'Hotaru - Administration' })
            .setTimestamp();

        return { embeds: [embed] };
    }

    /**
     * Embed de log pour le canal des logs
     */
    static createLogEmbed(
        action: 'verified' | 'removed' | 'manual',
        userId: string,
        username: string,
        email: string,
        adminName?: string
    ): EmbedBuilder {
        const titles = {
            verified: '‚úÖ Nouvelle v√©rification',
            removed: 'üóëÔ∏è V√©rification supprim√©e',
            manual: 'üëë V√©rification manuelle'
        };

        const colors = {
            verified: Colors.Green,
            removed: Colors.Red,
            manual: Colors.Gold
        };

        const embed = new EmbedBuilder()
            .setTitle(titles[action])
            .setDescription(
                `**Utilisateur :** <@${userId}> (${username})\n` +
                `**Email :** ${email}\n` +
                (adminName ? `**Administrateur :** ${adminName}\n` : '') +
                `**Date :** ${new Date().toLocaleString('fr-FR')}`
            )
            .setColor(colors[action])
            .setFooter({ text: 'Hotaru - Logs' })
            .setTimestamp();

        return embed;
    }
}
